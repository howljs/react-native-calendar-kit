/*! For license information please see 5873b5e4.5fa3b2cc.js.LICENSE.txt */
"use strict";(self.webpackChunkcalendar_kit_docs=self.webpackChunkcalendar_kit_docs||[]).push([[130],{9874:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=t(412),a=t(6823);const i={sidebar_position:5},d="Drag Selected Event",o={id:"guides/drag-selected-event",title:"Drag Selected Event",description:"The React Native Calendar Kit allows users to edit a selected event by dragging it to a new time or date. This guide will walk you through enabling this feature and customizing its behavior.",source:"@site/docs/guides/drag-selected-event.md",sourceDirName:"guides",slug:"/guides/drag-selected-event",permalink:"/react-native-calendar-kit/docs/guides/drag-selected-event",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Drag to Edit Events",permalink:"/react-native-calendar-kit/docs/guides/drag-to-edit"},next:{title:"Fetch events",permalink:"/react-native-calendar-kit/docs/guides/fetch-events"}},s={},l=[{value:"Enabling Drag Selected Event",id:"enabling-drag-selected-event",level:2},{value:"Handling Selected Event Editing",id:"handling-selected-event-editing",level:2},{value:"Customizing Drag Selected Event Behavior",id:"customizing-drag-selected-event-behavior",level:2},{value:"Drag Step",id:"drag-step",level:3},{value:"Customizing the Dragging Indicator",id:"customizing-the-dragging-indicator",level:3},{value:"Customizing for Selected Event",id:"customizing-for-selected-event",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"drag-selected-event",children:"Drag Selected Event"})}),"\n",(0,r.jsx)(n.p,{children:"The React Native Calendar Kit allows users to edit a selected event by dragging it to a new time or date. This guide will walk you through enabling this feature and customizing its behavior."}),"\n",(0,r.jsx)(n.h2,{id:"enabling-drag-selected-event",children:"Enabling Drag Selected Event"}),"\n",(0,r.jsxs)(n.p,{children:["To enable the drag selected event feature, you need to set the ",(0,r.jsx)(n.code,{children:"allowDragToEdit"})," prop to ",(0,r.jsx)(n.code,{children:"true"})," and provide a ",(0,r.jsx)(n.code,{children:"selectedEvent"})," to the ",(0,r.jsx)(n.code,{children:"CalendarContainer"})," component:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import {\n  CalendarContainer,\n  CalendarHeader,\n  CalendarBody,\n} from "@howljs/calendar-kit";\n\nconst MyCalendar = () => {\n  const [selectedEvent, setSelectedEvent] = useState(null);\n\n  return (\n    <CalendarContainer\n      selectedEvent={selectedEvent}\n      // ... other props\n    >\n      <CalendarHeader />\n      <CalendarBody />\n    </CalendarContainer>\n  );\n};\n'})}),"\n",(0,r.jsx)(n.h2,{id:"handling-selected-event-editing",children:"Handling Selected Event Editing"}),"\n",(0,r.jsx)(n.p,{children:"When a user drags to edit the selected event, you need to handle the editing process. This is done using two callback props:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onDragSelectedEventStart"}),": Called when the user starts dragging the selected event."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onDragSelectedEventEnd"}),": Called when the user releases the drag, finalizing the event edit."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here's an example of how to implement these callbacks:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'const MyCalendar = () => {\n  const [selectedEvent, setSelectedEvent] = useState(null);\n\n  const handleDragStart = (event) => {\n    console.log("Started editing selected event:", event);\n    // You can use this to show a UI indicator that event editing has started\n  };\n\n  const handleDragEnd = (event, newStart, newEnd) => {\n    console.log("Selected event edited:", event, newStart, newEnd);\n    // Here you would typically update the event in your events array\n    // and possibly update your backend or state management\n    setSelectedEvent(null); // Clear the selected event after editing\n  };\n\n  return (\n    <CalendarContainer\n      selectedEvent={selectedEvent}\n      onDragSelectedEventStart={handleDragStart}\n      onDragSelectedEventEnd={handleDragEnd}\n      // ... other props\n    >\n      <CalendarHeader />\n      <CalendarBody />\n    </CalendarContainer>\n  );\n};\n'})}),"\n",(0,r.jsx)(n.h2,{id:"customizing-drag-selected-event-behavior",children:"Customizing Drag Selected Event Behavior"}),"\n",(0,r.jsx)(n.p,{children:"You can customize various aspects of the drag selected event feature:"}),"\n",(0,r.jsx)(n.h3,{id:"drag-step",children:"Drag Step"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"dragStep"})," prop determines the time increments (in minutes) for dragging:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"<CalendarContainer\n  allowDragToEdit={true}\n  dragStep={15} // Drag will snap to 15-minute increments\n  // ... other props\n>\n  {/* ... */}\n</CalendarContainer>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"customizing-the-dragging-indicator",children:"Customizing the Dragging Indicator"}),"\n",(0,r.jsx)(n.p,{children:"You can customize the appearance of the dragging indicator for the selected event by providing a custom renderer:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"const renderDraggingEvent = useCallback((props: DraggingEventProps) => {\n    return (\n      <DraggingEvent\n        {...props}\n        TopEdgeComponent={\n          <View\n            style={{\n              height: 15,\n              backgroundColor: 'red',\n              position: 'absolute',\n              width: '100%',\n            }}>\n            <Text style={{ textAlign: 'center', fontSize: 10 }}>Drag</Text>\n          </View>\n        }\n        BottomEdgeComponent={\n          <View\n            style={{\n              height: 15,\n              backgroundColor: 'red',\n              position: 'absolute',\n              bottom: 0,\n              width: '100%',\n            }}>\n            <Text style={{ textAlign: 'center', fontSize: 10 }}>Drag</Text>\n          </View>\n        }\n      />\n    );\n  }, []);\n\n<CalendarBody renderDraggingEvent={CustomDraggingEvent} />\n"})}),"\n",(0,r.jsx)(n.h3,{id:"customizing-for-selected-event",children:"Customizing for Selected Event"}),"\n",(0,r.jsx)(n.p,{children:"You can customize selected event by providing custom components:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"const renderDraggableEvent = useCallback(\n    (props: DraggableEventProps) => (\n      <DraggableEvent\n        {...props}\n        TopEdgeComponent={\n          <View\n            style={{\n              height: 15,\n              backgroundColor: 'red',\n              position: 'absolute',\n              width: '100%',\n            }}>\n            <Text style={{ textAlign: 'center', fontSize: 10 }}>Drag</Text>\n          </View>\n        }\n        BottomEdgeComponent={\n          <View\n            style={{\n              height: 15,\n              backgroundColor: 'red',\n              position: 'absolute',\n              bottom: 0,\n              width: '100%',\n            }}>\n            <Text style={{ textAlign: 'center', fontSize: 10 }}>Drag</Text>\n          </View>\n        }\n      />\n    ),\n    []\n  );\n\n<CalendarBody renderDraggableEvent={renderDraggableEvent} />\n"})})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},9296:(e,n,t)=>{var r=t(9856),a=Symbol.for("react.element"),i=Symbol.for("react.fragment"),d=Object.prototype.hasOwnProperty,o=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s={key:!0,ref:!0,__self:!0,__source:!0};function l(e,n,t){var r,i={},l=null,c=null;for(r in void 0!==t&&(l=""+t),void 0!==n.key&&(l=""+n.key),void 0!==n.ref&&(c=n.ref),n)d.call(n,r)&&!s.hasOwnProperty(r)&&(i[r]=n[r]);if(e&&e.defaultProps)for(r in n=e.defaultProps)void 0===i[r]&&(i[r]=n[r]);return{$$typeof:a,type:e,key:l,ref:c,props:i,_owner:o.current}}n.Fragment=i,n.jsx=l,n.jsxs=l},412:(e,n,t)=>{e.exports=t(9296)},6823:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>o});var r=t(9856);const a={},i=r.createContext(a);function d(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);