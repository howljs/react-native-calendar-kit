/*! For license information please see 177517cc.0877af2e.js.LICENSE.txt */
"use strict";(self.webpackChunkcalendar_kit_docs=self.webpackChunkcalendar_kit_docs||[]).push([[6733],{5685:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=t(412),r=t(6823);const o={sidebar_position:6},s="Fetch events",i={id:"guides/fetch-events",title:"Fetch events",description:"Learn how to fetch new events when the date changes in your calendar application.",source:"@site/docs/guides/fetch-events.md",sourceDirName:"guides",slug:"/guides/fetch-events",permalink:"/react-native-calendar-kit/docs/guides/fetch-events",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Drag Selected Event",permalink:"/react-native-calendar-kit/docs/guides/drag-selected-event"},next:{title:"Pinch to Zoom",permalink:"/react-native-calendar-kit/docs/guides/pinch-to-zoom"}},d={},c=[{value:"Overview",id:"overview",level:2},{value:"Example",id:"example",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"fetch-events",children:"Fetch events"})}),"\n",(0,a.jsx)(n.p,{children:"Learn how to fetch new events when the date changes in your calendar application."}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(n.p,{children:"This guide demonstrates how to implement a calendar component that fetches events dynamically as the user navigates through different dates."}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import {\n  CalendarContainer,\n  CalendarBody,\n  CalendarHeader,\n  EventItem,\n} from '@howljs/calendar-kit';\nimport React, { useEffect, useState } from 'react';\nimport { SafeAreaView } from 'react-native';\n\nconst randomColor = () => {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n\nconst generateEvents = ({ from, to }: { from: string; to: string }) => {\n  return new Array(20).fill(0).map((_, index) => {\n    const randomDateByIndex = new Date(\n      new Date(from).getFullYear(),\n      new Date(from).getMonth(),\n      new Date(from).getDate() +\n        Math.floor(\n          Math.random() * (new Date(to).getDate() - new Date(from).getDate())\n        ),\n      Math.floor(Math.random() * 24),\n      Math.floor(Math.random() * 60),\n      Math.floor(Math.random() * 60)\n    );\n    const duration = (Math.floor(Math.random() * 15) + 1) * 15 * 60 * 1000;\n    const endDate = new Date(randomDateByIndex.getTime() + duration);\n    return {\n      id: `event_${Math.random().toString(36).substring(2, 15)}`,\n      start: {\n        dateTime: randomDateByIndex.toISOString(),\n      },\n      end: {\n        dateTime: endDate.toISOString(),\n      },\n      title: `Event ${index + 1}`,\n      color: randomColor(),\n    } as EventItem;\n  });\n};\n\nconst fetchData = (props: { from: string; to: string }) =>\n  new Promise<EventItem[]>((resolve) => {\n    setTimeout(() => {\n      resolve(generateEvents(props));\n    }, 1000);\n  });\n\nconst Calendar = () => {\n  const [events, setEvents] = useState<EventItem[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const getEvents = async (date: string) => {\n    try {\n      setIsLoading(true);\n      const offset = 7; // days\n      const dateObj = new Date(date);\n      const fromDate = new Date(dateObj);\n      fromDate.setDate(dateObj.getDate() - offset);\n      const toDate = new Date(dateObj);\n      toDate.setDate(dateObj.getDate() + offset);\n\n      const newEvents = await fetchData({\n        from: fromDate.toISOString(),\n        to: toDate.toISOString(),\n      });\n      setEvents((prev) => [...prev, ...newEvents]);\n    } catch (error) {\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    const now = new Date();\n    getEvents(now.toISOString());\n  }, []);\n\n  const _onDateChanged = (date: string) => {\n    getEvents(date);\n  };\n\n  return (\n    <SafeAreaView style={{ flex: 1 }}>\n      <CalendarContainer\n        events={events}\n        isLoading={isLoading}\n        onDateChanged={_onDateChanged}>\n        <CalendarHeader />\n        <CalendarBody />\n      </CalendarContainer>\n    </SafeAreaView>\n  );\n};\n\nexport default Calendar;\n\n"})})]})}function f(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},9296:(e,n,t)=>{var a=t(9856),r=Symbol.for("react.element"),o=Symbol.for("react.fragment"),s=Object.prototype.hasOwnProperty,i=a.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,d={key:!0,ref:!0,__self:!0,__source:!0};function c(e,n,t){var a,o={},c=null,l=null;for(a in void 0!==t&&(c=""+t),void 0!==n.key&&(c=""+n.key),void 0!==n.ref&&(l=n.ref),n)s.call(n,a)&&!d.hasOwnProperty(a)&&(o[a]=n[a]);if(e&&e.defaultProps)for(a in n=e.defaultProps)void 0===o[a]&&(o[a]=n[a]);return{$$typeof:r,type:e,key:c,ref:l,props:o,_owner:i.current}}n.Fragment=o,n.jsx=c,n.jsxs=c},412:(e,n,t)=>{e.exports=t(9296)},6823:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var a=t(9856);const r={},o=a.createContext(r);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);