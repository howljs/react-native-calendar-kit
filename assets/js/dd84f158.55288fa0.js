/*! For license information please see dd84f158.55288fa0.js.LICENSE.txt */
"use strict";(self.webpackChunkcalendar_kit_docs=self.webpackChunkcalendar_kit_docs||[]).push([[4963],{1857:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var t=r(412),s=r(6823);const o={sidebar_position:10},i="Available methods",l={id:"guides/methods",title:"Available methods",description:"React Native Calendar Kit provides several methods that you can use to programmatically control the calendar. These methods are accessible through a ref attached to the CalendarKit component.",source:"@site/docs/guides/methods.md",sourceDirName:"guides",slug:"/guides/methods",permalink:"/react-native-calendar-kit/docs/guides/methods",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Event Overlap Handling",permalink:"/react-native-calendar-kit/docs/guides/overlap-handling"},next:{title:"Theme",permalink:"/react-native-calendar-kit/docs/guides/theme"}},a={},c=[{value:"Accessing Methods",id:"accessing-methods",level:2},{value:"Available Methods",id:"available-methods-1",level:2},{value:"goToDate",id:"gotodate",level:3},{value:"goToHour",id:"gotohour",level:3},{value:"goToNextPage",id:"gotonextpage",level:3},{value:"goToPrevPage",id:"gotoprevpage",level:3},{value:"zoom",id:"zoom",level:3},{value:"setVisibleDate",id:"setvisibledate",level:3},{value:"getDateByOffset",id:"getdatebyoffset",level:3},{value:"getEventByOffset",id:"geteventbyoffset",level:3},{value:"getSizeByDuration",id:"getsizebyduration",level:3},{value:"getVisibleStart",id:"getvisiblestart",level:3},{value:"getCurrentOffsetY",id:"getcurrentoffsety",level:3},{value:"Resource Navigation Methods",id:"resource-navigation-methods",level:2},{value:"goToResource",id:"gotoresource",level:3},{value:"goToNextResource",id:"gotonextresource",level:3},{value:"goToPrevResource",id:"gotoprevresource",level:3},{value:"Method Limitations",id:"method-limitations",level:2},{value:"Resource Mode Limitations",id:"resource-mode-limitations",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"available-methods",children:"Available methods"})}),"\n",(0,t.jsx)(n.p,{children:"React Native Calendar Kit provides several methods that you can use to programmatically control the calendar. These methods are accessible through a ref attached to the CalendarKit component."}),"\n",(0,t.jsx)(n.h2,{id:"accessing-methods",children:"Accessing Methods"}),"\n",(0,t.jsx)(n.p,{children:"To use these methods, first create a ref and attach it to the CalendarKit component:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import React, { useRef } from 'react';\nimport { CalendarKit } from '@howljs/calendar-kit';\n\nfunction MyCalendar() {\n  const calendarRef = useRef(null);\n\n  return <CalendarKit ref={calendarRef} />;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now you can call methods on ",(0,t.jsx)(n.code,{children:"calendarRef.current"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"available-methods-1",children:"Available Methods"}),"\n",(0,t.jsx)(n.h3,{id:"gotodate",children:"goToDate"}),"\n",(0,t.jsx)(n.p,{children:"Navigates to a specific date and optionally scrolls to a specific hour."}),"\n",(0,t.jsx)(n.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"options"}),": An object with the following properties:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"date"})," (optional): The date to navigate to (string in ISO format, Date object, or number as Unix timestamp). Default is ",(0,t.jsx)(n.code,{children:"current date"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"animatedDate"})," (optional): Whether to animate the date change (boolean, default: true)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"hourScroll"})," (optional): Whether to scroll to the hour of the specified date (boolean, default: false)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"animatedHour"})," (optional): Whether to animate the hour scroll (boolean, default: true)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"calendarRef.current?.goToDate({\n  date: new Date().toISOString(),\n  animatedDate: true,\n  hourScroll: true,\n  animatedHour: true\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"gotohour",children:"goToHour"}),"\n",(0,t.jsx)(n.p,{children:"Scrolls to a specific hour."}),"\n",(0,t.jsx)(n.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"hour"}),": The hour to scroll to (number, 0-23)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"animated"})," (optional): Whether to animate the scroll (boolean, default: true)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"calendarRef.current?.goToHour(14, false); // Scroll to 2 PM without animation\n"})}),"\n",(0,t.jsx)(n.h3,{id:"gotonextpage",children:"goToNextPage"}),"\n",(0,t.jsx)(n.p,{children:"Navigates to the next page of the calendar."}),"\n",(0,t.jsx)(n.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"animated"})," (optional): Whether to animate the transition (boolean, default: true)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"forceScrollByDay"})," (optional): Force scroll by day even if the calendar is in week view (boolean, default: false)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"calendarRef.current?.goToNextPage(true);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"gotoprevpage",children:"goToPrevPage"}),"\n",(0,t.jsx)(n.p,{children:"Navigates to the previous page of the calendar."}),"\n",(0,t.jsx)(n.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"animated"})," (optional): Whether to animate the transition (boolean, default: true)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"forceScrollByDay"})," (optional): Force scroll by day even if the calendar is in week view (boolean, default: false)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"calendarRef.current?.goToPrevPage(true, false);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"zoom",children:"zoom"}),"\n",(0,t.jsx)(n.p,{children:"Zooms the calendar in or out."}),"\n",(0,t.jsx)(n.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"options"})," (optional): An object with one of the following properties:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"scale"}),": The scale factor to zoom by"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"height"}),": The new height for time intervals"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"calendarRef.current?.zoom({ scale: 1.5 }); // Zoom in by 1.5x\ncalendarRef.current?.zoom({ height: 80 }); // Set time interval height to 80\n"})}),"\n",(0,t.jsx)(n.h3,{id:"setvisibledate",children:"setVisibleDate"}),"\n",(0,t.jsx)(n.p,{children:"Sets the visible date of the calendar."}),"\n",(0,t.jsx)(n.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"date"}),": The date to set as visible (string in ISO format, Date object, or number as Unix timestamp)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"calendarRef.current?.setVisibleDate('2024-03-15');\n"})}),"\n",(0,t.jsx)(n.p,{children:"This method is useful when you want to change mode from week to day, default in week view the visible date is the first day of the week, so when you change to day view, the calendar will scroll to the first day of the week, use this method before changing the mode to day view to set the correct visible date."}),"\n",(0,t.jsx)(n.p,{children:"Example: Press day number on week view to change to day view, if you want to scroll to the date of the pressed day number, you can use this method."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"const _onPressDayNumber = (date: string) => {\n  calendarRef.current?.setVisibleDate(date);\n  setNumberOfDays(1);\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"getdatebyoffset",children:"getDateByOffset"}),"\n",(0,t.jsx)(n.p,{children:"Gets the date at a specific offset in the calendar."}),"\n",(0,t.jsx)(n.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"position"}),": An object with ",(0,t.jsx)(n.code,{children:"x"})," and ",(0,t.jsx)(n.code,{children:"y"})," coordinates"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Returns: A string representing the date at the given offset, or null if not found."}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"const date = calendarRef.current?.getDateByOffset({ x: 100, y: 200 });\n"})}),"\n",(0,t.jsx)(n.h3,{id:"geteventbyoffset",children:"getEventByOffset"}),"\n",(0,t.jsx)(n.p,{children:"Gets the event at a specific offset in the calendar."}),"\n",(0,t.jsx)(n.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"position"}),": An object with ",(0,t.jsx)(n.code,{children:"x"})," and ",(0,t.jsx)(n.code,{children:"y"})," coordinates"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Returns: An event object at the given offset, or null if not found."}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"const event = calendarRef.current?.getEventByOffset({ x: 100, y: 200 });\n"})}),"\n",(0,t.jsx)(n.h3,{id:"getsizebyduration",children:"getSizeByDuration"}),"\n",(0,t.jsx)(n.p,{children:"Gets the size (width and height) for an event of a specific duration."}),"\n",(0,t.jsx)(n.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"duration"}),": The duration of the event in minutes"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Returns: An object with ",(0,t.jsx)(n.code,{children:"width"})," and ",(0,t.jsx)(n.code,{children:"height"})," properties."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"const size = calendarRef.current?.getSizeByDuration(60); // Size for a 1-hour event\n"})}),"\n",(0,t.jsx)(n.h3,{id:"getvisiblestart",children:"getVisibleStart"}),"\n",(0,t.jsx)(n.p,{children:"Gets the start date and time of the currently visible calendar area."}),"\n",(0,t.jsx)(n.p,{children:"Returns: A string representing the start date and time of the visible area."}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"const visibleStart = calendarRef.current?.getVisibleStart();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"getcurrentoffsety",children:"getCurrentOffsetY"}),"\n",(0,t.jsx)(n.p,{children:"Gets the current Y offset of the calendar scroll view."}),"\n",(0,t.jsx)(n.p,{children:"Returns: A number representing the current Y offset."}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"const offsetY = calendarRef.current?.getCurrentOffsetY();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"resource-navigation-methods",children:"Resource Navigation Methods"}),"\n",(0,t.jsxs)(n.p,{children:["The following methods are available when using resources calendar with ",(0,t.jsx)(n.code,{children:"enableResourceScroll={true}"}),":"]}),"\n",(0,t.jsx)(n.h3,{id:"gotoresource",children:"goToResource"}),"\n",(0,t.jsx)(n.p,{children:"Navigates to a specific resource by its ID."}),"\n",(0,t.jsx)(n.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"options"}),": An object with the following properties:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"resourceId"}),": The ID of the resource to navigate to (string)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"animated"})," (optional): Whether to animate the transition (boolean, default: true)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"calendarRef.current?.goToResource({ \n  resourceId: 'room1', \n  animated: true \n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"gotonextresource",children:"goToNextResource"}),"\n",(0,t.jsx)(n.p,{children:"Navigates to the next resource or page of resources."}),"\n",(0,t.jsx)(n.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"animated"})," (optional): Whether to animate the transition (boolean, default: true)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"scrollType"})," (optional): Type of scroll behavior:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"'resource'"}),": Scroll by individual resource"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"'page'"}),": Scroll by page (respects ",(0,t.jsx)(n.code,{children:"resourcePerPage"})," setting)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// Scroll to next individual resource\ncalendarRef.current?.goToNextResource(true, 'resource');\n\n// Scroll to next page of resources\ncalendarRef.current?.goToNextResource(true, 'page');\n"})}),"\n",(0,t.jsx)(n.h3,{id:"gotoprevresource",children:"goToPrevResource"}),"\n",(0,t.jsx)(n.p,{children:"Navigates to the previous resource or page of resources."}),"\n",(0,t.jsx)(n.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"animated"})," (optional): Whether to animate the transition (boolean, default: true)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"scrollType"})," (optional): Type of scroll behavior:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"'resource'"}),": Scroll by individual resource"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"'page'"}),": Scroll by page (respects ",(0,t.jsx)(n.code,{children:"resourcePerPage"})," setting)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// Scroll to previous individual resource\ncalendarRef.current?.goToPrevResource(true, 'resource');\n\n// Scroll to previous page of resources\ncalendarRef.current?.goToPrevResource(true, 'page');\n"})}),"\n",(0,t.jsx)(n.h2,{id:"method-limitations",children:"Method Limitations"}),"\n",(0,t.jsx)(n.h3,{id:"resource-mode-limitations",children:"Resource Mode Limitations"}),"\n",(0,t.jsxs)(n.p,{children:["When using ",(0,t.jsx)(n.code,{children:"enableResourceScroll={true}"}),", the following methods have limited functionality:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"getDateByOffset"})}),": Not supported in resource scroll mode"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"getEventByOffset"})}),": May have different behavior in resource mode"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Always check if your calendar is in resource mode before using these methods."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},9296:(e,n,r)=>{var t=r(9856),s=Symbol.for("react.element"),o=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,l=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,a={key:!0,ref:!0,__self:!0,__source:!0};function c(e,n,r){var t,o={},c=null,d=null;for(t in void 0!==r&&(c=""+r),void 0!==n.key&&(c=""+n.key),void 0!==n.ref&&(d=n.ref),n)i.call(n,t)&&!a.hasOwnProperty(t)&&(o[t]=n[t]);if(e&&e.defaultProps)for(t in n=e.defaultProps)void 0===o[t]&&(o[t]=n[t]);return{$$typeof:s,type:e,key:c,ref:d,props:o,_owner:l.current}}n.Fragment=o,n.jsx=c,n.jsxs=c},412:(e,n,r)=>{e.exports=r(9296)},6823:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var t=r(9856);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);